
#ifdef WIN32
    #include <windows.h>
    #include <GL/glew.h>
    #include <GL/glut.h>
    #include <GL/freeglut_ext.h>
    #include <direct.h>
#else
    #include <GL/gl.h>
    //#include "MicroGlut.h"
    //#include <GL/glut.h>
#endif

#include <stdio.h>
#include <math.h>
#include <stdlib.h>


#include "GL_utilities.h"

#include "ModelObject.h"
#include "LoadTGA.h"
#include "CPUClothSimulation.h"
#include "GPUClothSimulation.h"
#include "GPUWaterSimulation.h"
#include "PostProcessing.h"
#include "CelShading.h"

#include "GrassSimulation.h"
#include "Environment.h"
#include "TerrainLOD.h"
#include "KeyMouseHandler.h"

// initial width and heights
#define W SCREEN_WIDTH
#define H SCREEN_HEIGHT

//#define CEL_SHADING



void OnTimer(int value);
KeyMouseHandler mKeyMouseHandler;
//----------------------Globals-------------------------------------------------
mat4 projectionMatrix;
mat4 viewMatrix;
FBOstruct* fbo1;
//-------------------------------------------------------------------------------------

GLuint WIDTH;
GLuint HEIGHT;

// Cloth simulation
GPUSimulation * clothSimulation;
GrassSimulation * mGrassSimulation;
GPUWaterSimulation * waterSimulation;
PostProcessing * postProcessing;
CelShading * celShading;
Environment* mEnvironment;
TerrainLOD* mTerrainLOD;

void init(void)
{
	//dumpInfo();  // shader info
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// GL inits
	glClearColor(0.1, 0.1, 0.3, 0);
	glClearDepth(1.0);
	glEnable(GL_DEPTH_TEST);

	printError("GL inits");
#ifdef CEL_SHADING
    // Set up FBO with depth buffer
	fbo1 = initFBO2(SCREEN_WIDTH, SCREEN_HEIGHT, 0, 1);
#endif
	printError("GL inits");
    mEnvironment = new Environment(&WIDTH,&HEIGHT);

	mTerrainLOD = new TerrainLOD();
	mTerrainLOD->setEnvironment(mEnvironment);
	mTerrainLOD->initialize();
/*
    clothSimulation = new GPUClothSimulation(&WIDTH,&HEIGHT);
    clothSimulation->setEnvironment(mEnvironment);
    clothSimulation->initialize();


    waterSimulation =  new GPUWaterSimulation(&WIDTH,&HEIGHT);
    waterSimulation->setEnvironment(mEnvironment);
    waterSimulation->initialize();
    */
/*
*/

/*
    postProcessing = new PostProcessing(&WIDTH,&HEIGHT);
    postProcessing->setTerrin(mEnvironment);
    mKeyMouseHandler.setPostProcessing(postProcessing);
*/
/*
    mGrassSimulation = new GrassSimulation();
    mGrassSimulation->setEnvironment(mEnvironment);
    mGrassSimulation->initialize();
*/
#ifdef CEL_SHADING
    clothSimulation->setDefaultFBO(fbo1);
    waterSimulation->setDefaultFBO(fbo1);
    mEnvironment->setDefaultFBO(fbo1);
    celShading = new CelShading(&WIDTH, &HEIGHT);
    celShading->initialize(fbo1);
#endif
    // Create key/mouse handler
    mKeyMouseHandler = KeyMouseHandler();

	glutTimerFunc(5, &OnTimer, 0);
}

void OnTimer(int value)
{
	glutPostRedisplay();
	glutTimerFunc(5, &OnTimer, value);
}

//-------------------------------callback functions------------------------------------------
void display(void)
{
	// This function is called whenever it is time to render
	//  a new frame; due to the idle()-function below, this
	//  function will get called several times per second
#ifdef CEL_SHADING
	// Render to fbo1
	useFBO(fbo1, 0L, 0L);
#endif
	// Enable Z-buffering
	glEnable(GL_DEPTH_TEST);
	// Enable backface culling
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);
    //glDisable(GL_CULL_FACE);
	//	glFlush(); // Can cause flickering on some systems. Can also be necessary to make drawing complete.
	glClearColor(1.0, 1.0, 1.0, 0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    viewMatrix = mKeyMouseHandler.getViewMatrix();

    mEnvironment->draw(projectionMatrix,viewMatrix);

    //waterSimulation->draw(projectionMatrix,viewMatrix);
    //clothSimulation->draw(projectionMatrix,viewMatrix);
//    postProcessing->draw(projectionMatrix,viewMatrix);


    mTerrainLOD->draw(projectionMatrix,viewMatrix);
    //mGrassSimulation->draw(projectionMatrix,viewMatrix);
	//mGrassSimulation->update();

#ifdef CEL_SHADING
    celShading->draw(projectionMatrix, viewMatrix);
#endif
	glutSwapBuffers();
}

void reshape(GLsizei w, GLsizei h)
{

    WIDTH = w;
    HEIGHT = h;
    GLint curfbo;
    glGetIntegerv(GL_FRAMEBUFFER_BINDING, &curfbo);
    if(curfbo == 0){
        glViewport(0, 0, w, h);
    }

	GLfloat ratio = (GLfloat)w / (GLfloat)h;

    // Send the new window size to AntTweakBar
    //TwWindowSize(w, h);
	projectionMatrix = perspective(90, ratio, 1.0, 80);
	printError("Reshape");
}


// This function is called whenever the computer is idle
// As soon as the machine is idle, ask GLUT to trigger rendering of a new
// frame
void idle()
{
	/* Run update functions */

 //  clothSimulation->update();

	glutPostRedisplay();
}

void keyboard (unsigned char key, int x, int y)
{
    mKeyMouseHandler.keyPress(key, 0, 0);
}

void mouseClick (int button, int state, int x, int y)
{
    if (state == GLUT_UP)
        mKeyMouseHandler.mouseUp();
}

void mouse (int x, int y)
{
    mKeyMouseHandler.mouseHandle(x, y);
}

//-----------------------------main-----------------------------------------------
int main(int argc, char *argv[])
{
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_DOUBLE);
	glutInitWindowSize(W, H);

	glutInitContextVersion(4, 3);
	glutCreateWindow("Mysteriet Paw Silkesoen");
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutIdleFunc(idle);
#ifdef WIN32
	GLenum err = glewInit();
    if (GLEW_OK != err)
    {
      fprintf(stderr, "Error: %s\n", glewGetErrorString(err));
    }
    if (glewIsSupported("GL_VERSION_1_4  GL_ARB_point_sprite"))
    {
        fprintf(stdout, "Status: GL_VERSION 1_4");
    }
    fprintf(stdout, "Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));
    printError ("pre init");
#endif
    // Initialize AntTweakBar

	init();
	glutKeyboardFunc(keyboard);
	glutMouseFunc(mouseClick);
	glutMotionFunc(mouse);
	glutMainLoop();
	exit(0);
}

