/*
#version 410 core   

layout (triangles, equal_spacing, cw) in;

uniform sampler2D texUnit;


uniform mat4 MV_Matrix;
uniform mat4 MVP_Matrix;

in vec3 tes_Position[];
out vec3 g_Postion;
in vec3 g_Normal[3];
in vec3 g_LightPos[3];

void main()
{
    vec2 t0 = gl_TessCoord.x * tes_Position[0].xy;
    vec2 t1 = gl_TessCoord.y * tes_Position[1].xy;
    vec2 t2 = gl_TessCoord.z * tes_Position[2].xy;
	
	//vec3 p0 = texture(texUnit,clamp(t0,0.0,0.99)).xyz;
	//vec3 p1 = texture(texUnit,clamp(t1,0.0,0.99)).xyz;
	//vec3 p2 = texture(texUnit,clamp(t2,0.0,0.99)).xyz;
	
	
	vec3 p0 = gl_TessCoord.x * tes_Position[0].xyz;
	vec3 p1 = gl_TessCoord.y * tes_Position[1].xyz;
	vec3 p2 = gl_TessCoord.z * tes_Position[2].xyz;
	
    g_Postion = p0 + p1 + p2;
	g_Normal = vec3(1.0);
	g_LightPos = vec43
    gl_Position = MVP_Matrix * vec4(g_Postion, 1);
}
*/
#version 410 core   

layout (triangles, equal_spacing, cw) in;

uniform sampler2D texUnit;


uniform mat4 MV_Matrix;
uniform mat4 MVP_Matrix;

in vec3 tes_Position[];
out vec3 f_Postion;
out vec3 f_Normal;
out vec3 f_LightPos;

void main()
{
    vec2 t0 = gl_TessCoord.x * tes_Position[0].xy;
    vec2 t1 = gl_TessCoord.y * tes_Position[1].xy;
    vec2 t2 = gl_TessCoord.z * tes_Position[2].xy;
	/*
	vec3 p0 = texture(texUnit,clamp(t0,0.0,0.99)).xyz;
	vec3 p1 = texture(texUnit,clamp(t1,0.0,0.99)).xyz;
	vec3 p2 = texture(texUnit,clamp(t2,0.0,0.99)).xyz;
	*/
	
	vec3 p0 = gl_TessCoord.x * tes_Position[0].xyz;
	vec3 p1 = gl_TessCoord.y * tes_Position[1].xyz;
	vec3 p2 = gl_TessCoord.z * tes_Position[2].xyz;
	
    f_Postion = p0 + p1 + p2;
	f_Normal = vec3(1.0);
	f_LightPos = vec3(1.0);
    gl_Position = MVP_Matrix * vec4(f_Postion, 1);
}